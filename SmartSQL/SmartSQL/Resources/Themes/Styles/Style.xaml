<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:avalonedit="http://icsharpcode.net/sharpdevelop/avalonedit"
    xmlns:hc="https://handyorg.github.io/handycontrol"
    xmlns:interactivity="clr-namespace:HandyControl.Interactivity;assembly=HandyControl"
    xmlns:svgc="http://sharpvectors.codeplex.com/svgc/">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="../Basic/Geometries.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <Style
        x:Key="CirclePanelButton"
        BasedOn="{StaticResource ButtonCustom}"
        TargetType="Button">
        <Setter Property="UseLayoutRounding" Value="False" />
        <Setter Property="Height" Value="77" />
        <Setter Property="Width" Value="36.06" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <hc:SimplePanel>
                        <Path
                            Width="36.06"
                            Height="77"
                            Data="{StaticResource CirclePanelDemoGeometry}"
                            Fill="{DynamicResource PrimaryBrush}" />
                        <Path
                            Margin="12"
                            Data="{StaticResource CirclePanelRightGeometry}"
                            Fill="White"
                            Stretch="Uniform" />
                    </hc:SimplePanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Opacity" Value=".9" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Opacity" Value=".6" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.4" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style
        x:Key="TabItemTransparent"
        BasedOn="{StaticResource TabItemInLine}"
        TargetType="TabItem">
        <Setter Property="Background" Value="Transparent" />
    </Style>

    <Style
        x:Key="ListBoxItemTransparent"
        BasedOn="{StaticResource ListBoxItemBaseStyle}"
        TargetType="ListBoxItem">
        <Setter Property="Visibility" Value="{Binding IsVisible, Converter={StaticResource Boolean2VisibilityConverter}}" />
        <Setter Property="hc:BorderElement.CornerRadius" Value="4" />
        <Setter Property="Background" Value="Transparent" />
    </Style>

    <Style
        x:Key="ListBoxItemSmart"
        BasedOn="{StaticResource ListBoxItemBaseStyle}"
        TargetType="ListBoxItem">
        <!--<Setter Property="Cursor" Value="Hand" />-->
        <Setter Property="FontSize" Value="12" />
        <Setter Property="Height" Value="40" />
        <Style.Triggers>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Background" Value="#EDF0F8" />
                <Setter Property="Foreground" Value="{StaticResource PrimaryBrush}" />
                <Setter Property="FontWeight" Value="Bold" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="#efefef" />
            </Trigger>
        </Style.Triggers>
    </Style>


    <Style
        x:Key="ListBoxSmart"
        BasedOn="{StaticResource ListBoxBaseStyle}"
        TargetType="ListBox">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="ItemContainerStyle" Value="{StaticResource ListBoxItemSmart}" />
    </Style>

    <Style
        x:Key="ListBoxTransparent"
        BasedOn="{StaticResource ListBoxBaseStyle}"
        TargetType="ListBox">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="ItemContainerStyle" Value="{StaticResource ListBoxItemTransparent}" />
    </Style>

    <ItemsPanelTemplate x:Key="FluidMoveBehaviorWrapPanelItemsPanelTemplate">
        <WrapPanel
            HorizontalAlignment="Center"
            VerticalAlignment="Center"
            hc:PanelElement.FluidMoveBehavior="{StaticResource BehaviorXY200}" />
    </ItemsPanelTemplate>

    <Style
        x:Key="MessageBoxCustom"
        BasedOn="{StaticResource {x:Type hc:MessageBox}}"
        TargetType="hc:MessageBox">
        <Setter Property="NonClientAreaBackground" Value="#262e2f" />
        <Setter Property="OtherButtonHoverBackground" Value="#888580" />
        <Setter Property="OtherButtonForeground" Value="White" />
        <Setter Property="OtherButtonHoverForeground" Value="White" />
        <Setter Property="NonClientAreaForeground" Value="White" />
        <Setter Property="CloseButtonForeground" Value="White" />
        <!--<Setter Property="Icon" Value="/SmartSQL;component/Resources/Img/icon.ico" />-->
    </Style>

    <Style x:Key="TextBlockFabricIcons" TargetType="TextBlock">
        <Setter Property="FontFamily" Value="{StaticResource FabricIcons}" />
        <Setter Property="FontSize" Value="14" />
    </Style>

    <Style BasedOn="{StaticResource {x:Type hc:Sprite}}" TargetType="hc:Sprite">
        <Setter Property="Padding" Value="25" />
    </Style>

    <Storyboard x:Key="Custom1Transition" x:Shared="False">
        <DoubleAnimation
            Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)"
            From="50"
            To="0"
            Duration="0:0:0.4">
            <DoubleAnimation.EasingFunction>
                <ElasticEase Oscillations="1" />
            </DoubleAnimation.EasingFunction>
        </DoubleAnimation>
    </Storyboard>

    <Storyboard x:Key="Custom2Transition" x:Shared="False">
        <DoubleAnimation
            Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)"
            From="10"
            To="0"
            Duration="0:0:0.4">
            <DoubleAnimation.EasingFunction>
                <ElasticEase Oscillations="1" />
            </DoubleAnimation.EasingFunction>
        </DoubleAnimation>
    </Storyboard>

    <Storyboard x:Key="Custom3Transition" x:Shared="False">
        <DoubleAnimation
            Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)"
            From=".8"
            To="1"
            Duration="0:0:0.4">
            <DoubleAnimation.EasingFunction>
                <ElasticEase Oscillations="1" />
            </DoubleAnimation.EasingFunction>
        </DoubleAnimation>
    </Storyboard>

    <!--<Style x:Key="TextEditorCustom" TargetType="avalonedit:TextEditor">
        <Setter Property="IsReadOnly" Value="True" />
        <Setter Property="FontFamily" Value="Consolas" />
        <Setter Property="Margin" Value="4" />
        <Setter Property="ShowLineNumbers" Value="True" />
        <Setter Property="LineNumbersForeground" Value="{DynamicResource EditorLineNumbersForeground}" />
        <Setter Property="Foreground" Value="{DynamicResource EditorForeground}" />
        <Setter Property="Background" Value="{DynamicResource RegionBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="avalonedit:TextEditor">
                    <ControlTemplate.Resources>
                        <Style TargetType="avalonedit:TextView">
                            <Setter Property="NonPrintableCharacterBrush" Value="{DynamicResource EditorNonPrintableCharacterBrush}" />
                            <Setter Property="LinkTextForegroundBrush" Value="{DynamicResource EditorLinkTextForegroundBrush}" />
                            <Setter Property="LinkTextBackgroundBrush" Value="{DynamicResource EditorLinkTextBackgroundBrush}" />
                        </Style>
                        <Style TargetType="avalonedit:TextArea">
                            <Setter Property="FocusVisualStyle" Value="{x:Null}" />
                            <Setter Property="SelectionBrush" Value="{DynamicResource EditorSelectionBrush}" />
                            <Setter Property="SelectionBorder">
                                <Setter.Value>
                                    <Pen Brush="{DynamicResource EditorSelectionBorder}" Thickness="1" />
                                </Setter.Value>
                            </Setter>
                            <Setter Property="SelectionCornerRadius" Value="0" />
                            <Setter Property="SelectionForeground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="avalonedit:TextArea">
                                        <DockPanel Focusable="False">
                                            <ItemsControl
                                                DockPanel.Dock="Left"
                                                Focusable="False"
                                                ItemsSource="{Binding LeftMargins, RelativeSource={RelativeSource TemplatedParent}}">
                                                <ItemsControl.ItemsPanel>
                                                    <ItemsPanelTemplate>
                                                        <StackPanel Orientation="Horizontal" />
                                                    </ItemsPanelTemplate>
                                                </ItemsControl.ItemsPanel>
                                            </ItemsControl>
                                            <ContentPresenter
                                                Panel.ZIndex="-1"
                                                Content="{Binding TextView, RelativeSource={RelativeSource TemplatedParent}}"
                                                Focusable="False" />
                                        </DockPanel>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                        </Style>
                    </ControlTemplate.Resources>
                    <Border
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}">
                        <ScrollViewer
                            Name="PART_ScrollViewer"
                            Padding="{TemplateBinding Padding}"
                            HorizontalContentAlignment="Left"
                            VerticalContentAlignment="Top"
                            CanContentScroll="True"
                            Content="{Binding TextArea, RelativeSource={RelativeSource TemplatedParent}}"
                            Focusable="False"
                            HorizontalScrollBarVisibility="Auto"
                            VerticalScrollBarVisibility="Auto" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="WordWrap" Value="True">
                            <Setter TargetName="PART_ScrollViewer" Property="HorizontalScrollBarVisibility" Value="Disabled" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>-->

    <Style x:Key="Path4GeometryItem" TargetType="Path">
        <Setter Property="Margin" Value="10" />
        <Setter Property="Data" Value="{Binding Info.Data, RelativeSource={RelativeSource AncestorType=Border}}" />
        <Setter Property="Fill" Value="{DynamicResource PrimaryBrush}" />
        <Setter Property="Width" Value="20" />
        <Setter Property="Height" Value="20" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Stretch" Value="Uniform" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding Info.Line, RelativeSource={RelativeSource AncestorType=Border}}" Value="True">
                <Setter Property="Fill" Value="{x:Null}" />
                <Setter Property="Stroke" Value="{DynamicResource PrimaryBrush}" />
            </DataTrigger>
        </Style.Triggers>
    </Style>


    <Style x:Key="ButtonIconSingle" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="Width" Value="20" />
        <Setter Property="Height" Value="20" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="False">
                <Setter Property="Background" Value="Transparent" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="#cccccc" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style
        x:Key="MenuListBoxItemStyle"
        BasedOn="{StaticResource ListBoxItemBaseStyle}"
        TargetType="ListBoxItem">
        <Setter Property="Height" Value="50" />
        <Setter Property="Margin" Value="4,3,4,3" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="Foreground" Value="#727e96" />
        <Setter Property="Background" Value="#ffffff" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ListBoxItem">
                    <Border
                        x:Name="Bd"
                        Padding="{TemplateBinding Padding}"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="5"
                        SnapsToDevicePixels="true">
                        <!--  Here you can set the corner radius  -->
                        <Grid>
                            <Border
                                x:Name="BdSelected"
                                Width="2.8"
                                Height="20"
                                HorizontalAlignment="Left"
                                Background="#417FF9"
                                CornerRadius="1"
                                Visibility="Collapsed" />
                            <ContentPresenter
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="Background" Value="#F4F5F7" />
                            <Setter Property="Foreground" Value="#417FF9" />
                            <Setter TargetName="BdSelected" Property="Visibility" Value="Visible" />
                            <!--<Setter TargetName="Bd" Property="BorderBrush" Value="#417FF9" />
                            <Setter TargetName="Bd" Property="BorderThickness" Value="5,0,0,0" />-->
                        </Trigger>
                        <!--  Your triggers for visual states like mouse over, selected etc.  -->
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Background" Value="#F4F5F7" />
                <Setter Property="Foreground" Value="#417FF9" />
            </Trigger>
        </Style.Triggers>
    </Style>


    <Style x:Key="TabItemPlusBaseStyle" TargetType="{x:Type hc:TabItem}">
        <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
        <Setter Property="Background" Value="{DynamicResource SecondaryRegionBrush}" />
        <Setter Property="BorderThickness" Value="1,0,0,0" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="Margin" Value="0,0,0,0" />
        <Setter Property="Padding" Value="10,0,0,0" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="hc:TabItem.Menu" Value="{StaticResource TabItemMenu}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type hc:TabItem}">
                    <Grid
                        Name="templateRoot"
                        ContextMenu="{TemplateBinding Menu}"
                        SnapsToDevicePixels="true">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <Border
                            Name="mainBorder"
                            Grid.ColumnSpan="3"
                            Margin="0,0,0,0"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                            <Border
                                Name="InnerBorder"
                                Margin="0,0,0,-1"
                                Background="{DynamicResource RegionBrush}"
                                Visibility="Collapsed" />
                        </Border>
                        <Path
                            Name="PathMain"
                            Grid.Column="0"
                            Width="{TemplateBinding Width}"
                            Height="{TemplateBinding Height}"
                            Margin="10,0,0,0"
                            Fill="{TemplateBinding Foreground}"
                            SnapsToDevicePixels="True"
                            Stretch="Uniform" />
                        <ContentPresenter
                            Name="contentPresenter"
                            Grid.Column="1"
                            Margin="{TemplateBinding Padding}"
                            HorizontalAlignment="Stretch"
                            VerticalAlignment="Center"
                            ContentSource="Header"
                            Focusable="False"
                            RecognizesAccessKey="True"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        <Border
                            Name="BorderMask"
                            Grid.Column="1"
                            Width="20"
                            Margin="0,0,1,1"
                            HorizontalAlignment="Right"
                            Background="{TemplateBinding Background}">
                            <Border.OpacityMask>
                                <LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
                                    <GradientStop Offset="1" Color="White" />
                                    <GradientStop Offset="0" />
                                </LinearGradientBrush>
                            </Border.OpacityMask>
                        </Border>
                        <Button
                            x:Name="PART_Close"
                            Grid.Column="2"
                            Width="18"
                            Height="18"
                            Margin="0,0,5,0"
                            Padding="0"
                            hc:BorderElement.CornerRadius="17"
                            Command="interactivity:ControlCommands.Close"
                            Focusable="False"
                            Style="{StaticResource ButtonCustom}"
                            Visibility="{TemplateBinding ShowCloseButton,
                                                         Converter={StaticResource Boolean2VisibilityConverter}}">
                            <Path
                                Width="8"
                                Height="8"
                                Fill="{DynamicResource PrimaryTextBrush}"
                                Style="{StaticResource ClosePathStyle}" />
                        </Button>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="TabItem.IsSelected" Value="true">
                            <Setter Property="Panel.ZIndex" Value="1" />
                            <Setter TargetName="InnerBorder" Property="Visibility" Value="Visible" />
                            <Setter TargetName="InnerBorder" Property="CornerRadius" Value="8 8 0 0" />
                            <Setter TargetName="BorderMask" Property="Background" Value="{DynamicResource RegionBrush}" />
                            <Setter Property="BorderThickness" Value="0" />
                        </Trigger>
                        <Trigger Property="hc:IconElement.Geometry" Value="{x:Null}">
                            <Setter TargetName="PathMain" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="hc:TabItem.ShowCloseButton" Value="True">
                            <Setter TargetName="BorderMask" Property="Margin" Value="0,0,0,1" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="contentPresenter" Property="UIElement.Opacity" Value="0.4" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>
